-- http 请求图片并保存
local http = require "resty.http"
local httpc = http:new()

local res, err = httpc:request_uri("https://img-blog.csdn.net/20180718090110780?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h4eDE4Mjc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70", {
	ssl_verify = ssl_verify or false,
    method = "GET",
    headers = {
	    ["Referer"] = "https://blog.csdn.net/xxx1827/article/details/81091963",
    },
})
if not res then
	ngx.say("failed to request: ", err)
	return
end
ngx.say(res.body)

local file = io.open("D:/data/lua_csdn.jpg", "w+b")
if not file then
	ngx.say("file not found")
	return
end
if file:write(res.body) == nil then return false end
io.close(file)




-- openresty + lua + redis
local redis = require "resty.redis"
local red = redis:new()
				
local ok, err = red.connect(red, "121.40.155.5", "7480")
ngx.say("<br>redis connect: ", ok)
if not ok then
	ngx.say("<br>failed to connect: ", err)
	return
end

local res, err = red:auth("s7480.uw.redis")
ngx.say("<br>redis auth: ", res)
if not res then
	ngx.say("<br>failed to authenticate: ", err)
	return
end

local res, err = red:get("test")
if not res then
	ngx.say("<br>fail to get test: ", err)
	return
end
ngx.say("<br>redis get: ", res)

if string.find(ngx.var.request_uri, ".html") then
	local date=os.date("%Y%m%d")
	local sss = red:hincrby("NginxAdPv:" .. date, "http://www.shuuichi.cn" .. ngx.var.request_uri, 1)
	ngx.say("<br>hincrby: ", sss)
end

local ok, err = red:set_keepalive(60000, 20)
if not ok then
	ngx.say("<br>failed to set keepalive: ", err)
	return
end




-- openresty + lua + kafka 记录访问日志
local cjson = require "cjson"  
local producer = require "resty.kafka.producer"  
-- 定义kafka broker地址，ip需要和kafka的host.name配置一致  
local broker_list = {  
    { host = "192.168.10.100", port = 9092 },  
}  
-- 定义json便于日志数据整理收集  
local log_json = {}  
log_json["uri"]=ngx.var.uri  
log_json["args"]=ngx.var.args  
log_json["host"]=ngx.var.host  
log_json["request_body"]=ngx.var.request_body  
log_json["remote_addr"] = ngx.var.remote_addr  
log_json["remote_user"] = ngx.var.remote_user  
log_json["time_local"] = ngx.var.time_local  
log_json["status"] = ngx.var.status  
log_json["body_bytes_sent"] = ngx.var.body_bytes_sent  
log_json["http_referer"] = ngx.var.http_referer  
log_json["http_user_agent"] = ngx.var.http_user_agent  
log_json["http_x_forwarded_for"] = ngx.var.http_x_forwarded_for  
log_json["upstream_response_time"] = ngx.var.upstream_response_time  
log_json["request_time"] = ngx.var.request_time  
-- 转换json为字符串  
local message = cjson.encode(log_json);  
-- 定义kafka异步生产者  
local bp = producer:new(broker_list, { producer_type = "async" })  
-- 发送日志消息,send第二个参数key,用于kafka路由控制:  
-- key为nill(空)时，一段时间向同一partition写入数据  
-- 指定key，按照key的hash写入到对应的partition  
local ok, err = bp:send("test1", nil, message)  

ngx.say("<br>", message)
ngx.say("<br>kafka result:", ok)
ngx.say("<br>kafka error:", err)

