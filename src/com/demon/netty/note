Linux 内核将所有外部设备都看作一个文件来操作，对一个文件的读写操作会调用内核提供的系统命令，返回一个file descriptor（fd，文件描述符）

而对一个socket的读写也会有相应的描述符，称为socketfd（socket描述符），描述符就是一个数字，它指向内核中的一个结构体（文件路径，数据区等一些属性）

根据UNIX网络编程对I/O模型的分类，UNIX提供了5种I/O模型：
（1）阻塞I/O模型：
	最常用的I/O模型，缺省情况下，所有文件操作都是阻塞的。
	socket为例，阻塞I/O模型：在进程空间中调用recvfrom，其系统调用直到数据包达到且被复制到应用进程的缓冲区中或者发生错误时才返回，
	在此期间一直会等待，进程从调用recvfrom开始到它返回的整段时间内都是被阻塞的，因此被称为阻塞I/O模型
	
（2）非阻塞I/O模型：
	recvfrom从应用层到内核的时候，如果该缓冲区没有数据的话，就直接返回一个EWOULDBLOCK错误。
	一般都对非阻塞I/O模型进行轮询检查这个状态，看内核是不是有数据到来
	
（3）I/O复用模型：
	Linux提供select/poll，进程通过将一个或多个fd传递给select或poll系统调用，阻塞在select操作上，select/poll顺序扫描fd是否就绪，而且支持的fd数量有限
	Linux还提供一个epoll系统调用，epoll使用基于